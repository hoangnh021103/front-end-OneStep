import axios from 'axios';

const API_URL = 'http://localhost:8080';

export const thanhToanApi = {
  /**
   * L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n
   * @returns {Promise} - Promise ch·ª©a danh s√°ch h√≥a ƒë∆°n
   */
  hienThi: async () => {
    try {
      const response = await axios.get(`${API_URL}/thanh-toan/hien-thi`);
      return response.data;
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch h√≥a ƒë∆°n:', error);
      throw error;
    }
  },

  /**
   * L·∫•y h√≥a ƒë∆°n ph√¢n trang
   * @param {number} page - S·ªë trang (m·∫∑c ƒë·ªãnh = 0)
   * @returns {Promise} - Promise ch·ª©a danh s√°ch h√≥a ƒë∆°n theo trang
   */
  phanTrang: async (page = 0) => {
    try {
      const response = await axios.get(`${API_URL}/thanh-toan/phan-trang`, {
        params: { page }
      });
      return response.data;
    } catch (error) {
      console.error('L·ªói khi l·∫•y h√≥a ƒë∆°n ph√¢n trang:', error);
      throw error;
    }
  },

  /**
   * T·∫°o h√≥a ƒë∆°n m·ªõi
   * @param {Object} hoaDon - Th√¥ng tin h√≥a ƒë∆°n
   * @returns {Promise} - Promise ch·ª©a h√≥a ƒë∆°n v·ª´a t·∫°o
   */
  taoHoaDon: async (hoaDon) => {
    try {
      console.log('üõí G·ª≠i d·ªØ li·ªáu thanh to√°n:', hoaDon);
      const response = await axios.post(`${API_URL}/thanh-toan/ban-hang-tai-quay`, hoaDon);
      console.log('‚úÖ Thanh to√°n th√†nh c√¥ng:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o h√≥a ƒë∆°n:', error);
      console.error('‚ùå Error response:', error.response?.data);
      console.error('‚ùå Error status:', error.response?.status);
      
      // T·∫°o error message chi ti·∫øt h∆°n
      const errorMsg = error.response?.data?.message || 
                      error.response?.data || 
                      error.message || 
                      'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      
      throw new Error(errorMsg);
    }
  },

  /**
   * Th√™m thanh to√°n
   * @param {Object} thanhToan - Th√¥ng tin thanh to√°n
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ thanh to√°n
   */
  themThanhToan: async (thanhToan) => {
    try {
      const response = await axios.post(`${API_URL}/thanh-toan/add`, thanhToan);
      return response.data;
    } catch (error) {
      console.error('L·ªói khi th√™m thanh to√°n:', error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t thanh to√°n
   * @param {number} id - ID thanh to√°n
   * @param {Object} thanhToan - Th√¥ng tin thanh to√°n c·∫ßn c·∫≠p nh·∫≠t
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ c·∫≠p nh·∫≠t
   */
  capNhatThanhToan: async (id, thanhToan) => {
    try {
      const response = await axios.put(`${API_URL}/thanh-toan/update/${id}`, thanhToan);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t thanh to√°n ID ${id}:`, error);
      throw error;
    }
  },

  /**
   * X√≥a thanh to√°n
   * @param {number} id - ID thanh to√°n
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ x√≥a
   */
  xoaThanhToan: async (id) => {
    try {
      const response = await axios.delete(`${API_URL}/thanh-toan/delete/${id}`);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi x√≥a thanh to√°n ID ${id}:`, error);
      throw error;
    }
  },

  /**
   * L·∫•y th√¥ng tin thanh to√°n theo ID
   * @param {number} id - ID thanh to√°n
   * @returns {Promise} - Promise ch·ª©a th√¥ng tin thanh to√°n
   */
  layTheoId: async (id) => {
    try {
      const response = await axios.get(`${API_URL}/thanh-toan/${id}`);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi l·∫•y thanh to√°n ID ${id}:`, error);
      throw error;
    }
  },

  /**
   * Ch·ªçn kh√°ch h√†ng cho h√≥a ƒë∆°n
   * @param {number} hoaDonId - ID h√≥a ƒë∆°n
   * @param {number} khachHangId - ID kh√°ch h√†ng
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ c·∫≠p nh·∫≠t
   */
  chonKhachHang: async (hoaDonId, khachHangId) => {
    try {
      const response = await axios.put(`${API_URL}/thanh-toan/${hoaDonId}/chon-khach-hang/${khachHangId}`);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi ch·ªçn kh√°ch h√†ng cho h√≥a ƒë∆°n ${hoaDonId}:`, error);
      throw error;
    }
  },

  /**
   * H·ªßy h√≥a ƒë∆°n
   * @param {number} hoaDonId - ID h√≥a ƒë∆°n
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ h·ªßy
   */
  huyHoaDon: async (hoaDonId) => {
    try {
      const response = await axios.put(`${API_URL}/thanh-toan/${hoaDonId}/huy`);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi h·ªßy h√≥a ƒë∆°n ${hoaDonId}:`, error);
      throw error;
    }
  },

  /**
   * √Åp d·ª•ng m√£ gi·∫£m gi√°
   * @param {number} hoaDonId - ID h√≥a ƒë∆°n
   * @param {string} code - M√£ gi·∫£m gi√°
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ √°p d·ª•ng
   */
  apDungGiamGia: async (hoaDonId, code) => {
    try {
      const response = await axios.put(`${API_URL}/thanh-toan/${hoaDonId}/apply-discount`, null, {
        params: { code }
      });
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi √°p d·ª•ng m√£ gi·∫£m gi√° ${code}:`, error);
      throw error;
    }
  },

  /**
   * L·∫•y danh s√°ch s·∫£n ph·∫©m cho b√°n h√†ng
   * @returns {Promise} - Promise ch·ª©a danh s√°ch s·∫£n ph·∫©m
   */
  layDanhSachSanPham: async () => {
    try {
      const response = await axios.get(`${API_URL}/thanh-toan/san-pham`);
      return response.data;
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:', error);
      throw error;
    }
  },

  /**
   * L·∫•y danh s√°ch chi ti·∫øt s·∫£n ph·∫©m (c√≥ k√≠ch th∆∞·ªõc, m√†u s·∫Øc) - API m·ªõi cho b√°n h√†ng
   * @returns {Promise} - Promise ch·ª©a danh s√°ch chi ti·∫øt s·∫£n ph·∫©m
   */
  layChiTietSanPham: async () => {
    try {
      console.log('üöÄ G·ªçi API:', `${API_URL}/thanh-toan/san-pham`);
      const response = await axios.get(`${API_URL}/thanh-toan/san-pham`);
      console.log('üì° Response status:', response.status);
      console.log('üì° Response data:', response.data);
      
      if (!response.data) {
        throw new Error('API tr·∫£ v·ªÅ d·ªØ li·ªáu null');
      }
      
      return response.data;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', error);
      console.error('‚ùå Error response:', error.response?.data);
      console.error('‚ùå Error status:', error.response?.status);
      
      // Fallback API c≈© n·∫øu API m·ªõi l·ªói
      try {
        console.log('üîÑ Th·ª≠ fallback API...');
        const fallbackResponse = await axios.get(`${API_URL}/chi-tiet-san-pham/hien-thi`);
        console.log('üì° Fallback response:', fallbackResponse.data);
        return fallbackResponse.data;
      } catch (fallbackError) {
        console.error('‚ùå L·ªói fallback:', fallbackError);
        throw error;
      }
    }
  },

  /**
   * L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID s·∫£n ph·∫©m
   * @param {number} sanPhamId - ID s·∫£n ph·∫©m
   * @returns {Promise} - Promise ch·ª©a chi ti·∫øt s·∫£n ph·∫©m
   */
  layChiTietTheoSanPham: async (sanPhamId) => {
    try {
      const response = await axios.get(`${API_URL}/chi-tiet-san-pham/hien-thi-theo-san-pham/${sanPhamId}`);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m ${sanPhamId}:`, error);
      throw error;
    }
  },

  /**
   * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
   * @param {Object} chiTietGioHang - Th√¥ng tin chi ti·∫øt gi·ªè h√†ng
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ th√™m v√†o gi·ªè
   */
  themVaoGioHang: async (chiTietGioHang) => {
    try {
      const response = await axios.post(`${API_URL}/chi-tiet-gio-hang/add`, chiTietGioHang);
      return response.data;
    } catch (error) {
      console.error('L·ªói khi th√™m v√†o gi·ªè h√†ng:', error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè h√†ng
   * @param {number} id - ID chi ti·∫øt gi·ªè h√†ng
   * @param {Object} chiTiet - Th√¥ng tin c·∫≠p nh·∫≠t
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ c·∫≠p nh·∫≠t
   */
  capNhatGioHang: async (id, chiTiet) => {
    try {
      const response = await axios.put(`${API_URL}/chi-tiet-gio-hang/update/${id}`, chiTiet);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng ${id}:`, error);
      throw error;
    }
  },

  /**
   * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
   * @param {number} id - ID chi ti·∫øt gi·ªè h√†ng
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ x√≥a
   */
  xoaKhoiGioHang: async (id) => {
    try {
      const response = await axios.delete(`${API_URL}/chi-tiet-gio-hang/delete/${id}`);
      return response.data;
    } catch (error) {
      console.error(`L·ªói khi x√≥a kh·ªèi gi·ªè h√†ng ${id}:`, error);
      throw error;
    }
  },

  /**
   * L·∫•y gi·ªè h√†ng theo user ho·∫∑c session
   * @param {number} userId - ID ng∆∞·ªùi d√πng (t√πy ch·ªçn)
   * @returns {Promise} - Promise ch·ª©a gi·ªè h√†ng
   */
  layGioHang: async (userId) => {
    try {
      const url = userId 
        ? `${API_URL}/gio-hang/user/${userId}`
        : `${API_URL}/gio-hang/hien-thi`;
      const response = await axios.get(url);
      return response.data;
    } catch (error) {
      console.error('L·ªói khi l·∫•y gi·ªè h√†ng:', error);
      throw error;
    }
  },

  /**
   * T√¨m ki·∫øm s·∫£n ph·∫©m
   * @param {string} keyword - T·ª´ kh√≥a t√¨m ki·∫øm
   * @returns {Promise} - Promise ch·ª©a k·∫øt qu·∫£ t√¨m ki·∫øm
   */
  timKiemSanPham: async (keyword) => {
    try {
      const response = await axios.get(`${API_URL}/thanh-toan/san-pham/search`, {
        params: { keyword }
      });
      return response.data;
    } catch (error) {
      console.error('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:', error);
      // Fallback: t√¨m trong danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
      try {
        const allProducts = await thanhToanApi.layChiTietSanPham();
        return allProducts.filter(product => 
          product.tenSanPham?.toLowerCase().includes(keyword.toLowerCase()) ||
          product.maSanPham?.toLowerCase().includes(keyword.toLowerCase())
        );
      } catch (fallbackError) {
        console.error('L·ªói fallback t√¨m ki·∫øm:', fallbackError);
        return [];
      }
    }
  }
};

export default thanhToanApi;
