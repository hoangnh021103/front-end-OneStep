import axios from 'axios'

class PaymentService {
  constructor() {
    this.baseURL = '/thanh-toan'
  }

  /**
   * T·∫°o thanh to√°n cho ƒë∆°n h√†ng v·ªõi kh√°ch h√†ng c·ª• th·ªÉ
   * @param {number} hoaDonId - ID h√≥a ƒë∆°n
   * @param {number} khachHangId - ID kh√°ch h√†ng
   * @param {Object} paymentData - D·ªØ li·ªáu thanh to√°n
   * @returns {Promise<Object>} K·∫øt qu·∫£ thanh to√°n
   */
  async createPayment(hoaDonId, khachHangId, paymentData) {
    try {
      console.log(`üîÑ T·∫°o thanh to√°n cho h√≥a ƒë∆°n ${hoaDonId}, kh√°ch h√†ng ${khachHangId}`)
      
      const response = await axios.post(
        `${this.baseURL}/${hoaDonId}/chon-khach-hang/${khachHangId}`,
        paymentData
      )
      
      console.log('‚úÖ T·∫°o thanh to√°n th√†nh c√¥ng:', response.data)
      return this.normalizePayment(response.data)
    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o thanh to√°n:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫°o thanh to√°n')
    }
  }

  /**
   * L·∫•y th√¥ng tin thanh to√°n theo ID
   * @param {number} paymentId - ID thanh to√°n
   * @returns {Promise<Object>} Th√¥ng tin thanh to√°n
   */
  async getPaymentById(paymentId) {
    try {
      const response = await axios.get(`${this.baseURL}/${paymentId}`)
      return this.normalizePayment(response.data)
    } catch (error) {
      console.error('Error fetching payment:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thanh to√°n')
    }
  }

  /**
   * L·∫•y danh s√°ch thanh to√°n theo ƒë∆°n h√†ng
   * @param {number} donHangId - ID ƒë∆°n h√†ng
   * @returns {Promise<Array>} Danh s√°ch thanh to√°n
   */
  async getPaymentsByOrder(donHangId) {
    try {
      const response = await axios.get(`${this.baseURL}/don-hang/${donHangId}`)
      return response.data.map(payment => this.normalizePayment(payment))
    } catch (error) {
      console.error('Error fetching payments by order:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch thanh to√°n')
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
   * @param {number} paymentId - ID thanh to√°n
   * @param {Object} updateData - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
   */
  async updatePayment(paymentId, updateData) {
    try {
      const response = await axios.put(`${this.baseURL}/${paymentId}`, updateData)
      return this.normalizePayment(response.data)
    } catch (error) {
      console.error('Error updating payment:', error)
      throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t thanh to√°n')
    }
  }

  /**
   * H·ªßy thanh to√°n
   * @param {number} paymentId - ID thanh to√°n
   * @returns {Promise<Object>} K·∫øt qu·∫£ h·ªßy
   */
  async cancelPayment(paymentId) {
    try {
      const response = await axios.delete(`${this.baseURL}/${paymentId}`)
      return response.data
    } catch (error) {
      console.error('Error cancelling payment:', error)
      throw new Error('Kh√¥ng th·ªÉ h·ªßy thanh to√°n')
    }
  }

  /**
   * L·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n
   * @returns {Promise<Array>} Danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n
   */
  async getPaymentMethods() {
    try {
      const response = await axios.get('/phuong-thuc-thanh-toan/hien-thi')
      return response.data.map(method => this.normalizePaymentMethod(method))
    } catch (error) {
      console.error('Error fetching payment methods:', error)
      // Fallback v·ªÅ danh s√°ch ph∆∞∆°ng th·ª©c m·∫∑c ƒë·ªãnh
      return this.getDefaultPaymentMethods()
    }
  }

  /**
   * Chu·∫©n h√≥a d·ªØ li·ªáu thanh to√°n t·ª´ API
   * @param {Object} payment - D·ªØ li·ªáu thanh to√°n th√¥ t·ª´ API
   * @returns {Object} D·ªØ li·ªáu thanh to√°n ƒë√£ chu·∫©n h√≥a
   */
  normalizePayment(payment) {
    return {
      id: payment.id || 0,
      donHangId: payment.donHangId || 0,
      phuongThucId: payment.phuongThucId || 0,
      maGiaoDich: payment.maGiaoDich || '',
      tongTien: payment.tongTien || 0,
      moTa: payment.moTa || '',
      trangThai: payment.trangThai || 0,
      ngayCapNhat: payment.ngayCapNhat || new Date().toISOString().split('T')[0],
      nguoiTao: payment.nguoiTao || '',
      nguoiCapNhat: payment.nguoiCapNhat || '',
      daXoa: payment.daXoa || 0,
      // Th√¥ng tin b·ªï sung
      trangThaiText: this.getPaymentStatusText(payment.trangThai || 0),
      phuongThucText: this.getPaymentMethodText(payment.phuongThucId || 0),
      formattedTongTien: this.formatPrice(payment.tongTien || 0),
      isActive: (payment.daXoa || 0) === 0
    }
  }

  /**
   * Chu·∫©n h√≥a d·ªØ li·ªáu ph∆∞∆°ng th·ª©c thanh to√°n
   * @param {Object} method - D·ªØ li·ªáu ph∆∞∆°ng th·ª©c th√¥ t·ª´ API
   * @returns {Object} D·ªØ li·ªáu ph∆∞∆°ng th·ª©c ƒë√£ chu·∫©n h√≥a
   */
  normalizePaymentMethod(method) {
    return {
      id: method.id || 0,
      ten: method.ten || method.name || '',
      moTa: method.moTa || method.description || '',
      icon: method.icon || this.getDefaultPaymentIcon(method.id || 0),
      isActive: method.trangThai !== 0,
      phiDichVu: method.phiDichVu || 0
    }
  }

  /**
   * L·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n m·∫∑c ƒë·ªãnh
   * @returns {Array} Danh s√°ch ph∆∞∆°ng th·ª©c m·∫∑c ƒë·ªãnh
   */
  getDefaultPaymentMethods() {
    return [
      {
        id: 1,
        ten: 'Thanh to√°n khi nh·∫≠n h√†ng (COD)',
        moTa: 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng',
        icon: 'cash_icon.png',
        isActive: true,
        phiDichVu: 0
      },
      {
        id: 2,
        ten: 'VNPay',
        moTa: 'Thanh to√°n qua c·ªïng VNPay',
        icon: 'vnpay_icon.png',
        isActive: true,
        phiDichVu: 0
      }
    ]
  }

  /**
   * L·∫•y icon m·∫∑c ƒë·ªãnh cho ph∆∞∆°ng th·ª©c thanh to√°n
   * @param {number} methodId - ID ph∆∞∆°ng th·ª©c
   * @returns {string} ƒê∆∞·ªùng d·∫´n icon
   */
  getDefaultPaymentIcon(methodId) {
    const iconMap = {
      1: 'cash_icon.png',
      2: 'vnpay_icon.png'
    }
    return iconMap[methodId] || 'cash_icon.png'
  }

  /**
   * L·∫•y text tr·∫°ng th√°i thanh to√°n
   * @param {number} status - M√£ tr·∫°ng th√°i
   * @returns {string} Text tr·∫°ng th√°i
   */
  getPaymentStatusText(status) {
    const statusMap = {
      0: 'Ch·ªù thanh to√°n',
      1: 'ƒê√£ thanh to√°n',
      2: 'Thanh to√°n th·∫•t b·∫°i',
      3: 'ƒê√£ h·ªßy',
      4: 'Ho√†n ti·ªÅn'
    }
    return statusMap[status] || 'Kh√¥ng x√°c ƒë·ªãnh'
  }

  /**
   * L·∫•y text ph∆∞∆°ng th·ª©c thanh to√°n
   * @param {number} methodId - ID ph∆∞∆°ng th·ª©c
   * @returns {string} Text ph∆∞∆°ng th·ª©c
   */
  getPaymentMethodText(methodId) {
    const methodMap = {
      1: 'COD',
      2: 'VNPay'
    }
    return methodMap[methodId] || 'Kh√¥ng x√°c ƒë·ªãnh'
  }

  /**
   * Format gi√° ti·ªÅn
   * @param {number} price - Gi√° ti·ªÅn
   * @returns {string} Gi√° ƒë√£ format
   */
  formatPrice(price) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price)
  }

  /**
   * T·∫°o m√£ giao d·ªãch duy nh·∫•t
   * @returns {string} M√£ giao d·ªãch
   */
  generateTransactionCode() {
    const timestamp = Date.now()
    const random = Math.random().toString(36).substr(2, 9)
    return `TXN_${timestamp}_${random}`.toUpperCase()
  }

  /**
   * Validate d·ªØ li·ªáu thanh to√°n tr∆∞·ªõc khi g·ª≠i
   * @param {Object} paymentData - D·ªØ li·ªáu thanh to√°n
   * @returns {Object} K·∫øt qu·∫£ validation
   */
  validatePaymentData(paymentData) {
    const errors = []

    if (!paymentData.donHangId || paymentData.donHangId <= 0) {
      errors.push('ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá')
    }

    if (!paymentData.phuongThucId || paymentData.phuongThucId <= 0) {
      errors.push('Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá')
    }

    if (!paymentData.tongTien || paymentData.tongTien <= 0) {
      errors.push('T·ªïng ti·ªÅn ph·∫£i l·ªõn h∆°n 0')
    }

    if (!paymentData.maGiaoDich || paymentData.maGiaoDich.trim() === '') {
      errors.push('M√£ giao d·ªãch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    return {
      isValid: errors.length === 0,
      errors: errors
    }
  }
}

export default new PaymentService()